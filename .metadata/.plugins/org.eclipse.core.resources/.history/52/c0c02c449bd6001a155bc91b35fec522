package com.bookstore.dao;

import static org.junit.Assert.*;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.bookstore.entity.Book;
import com.bookstore.entity.Category;

public class BookDAOTest{
	private static BookDAO bookDao;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		bookDao = new BookDAO();
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		bookDao.close();
	}

	@Test
	public void testCreateBook() throws ParseException, IOException {
		Book newBook = new Book();
		
		Category category = new Category( "Advanced Java");
		category.setCategoryId(2);
		
		newBook.setCategory(category);
		newBook.setAuthor("Herbert Schildt");
		newBook.setTitle("Java 1: The Complete Reference ");
		newBook.setDescripton("This fifth edition of a guide to the Java language covers the latest features of Java 2, v1.4, including the new I/O API, regular expression, chained exceptions, the assert keyword, and upgrades to Java's networking classes and the Collections Framework.");
		newBook.setPrice(35.50f);
		newBook.setIsbn("02451543");
		
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date publishDate = dateFormat.parse("05/24/2005");
		newBook.setPublishDate(publishDate);
		
		String imagePath = "C:\\Users\\vaske\\BookStoreProject\\pictures-of-books\\Java-2-The-Complete-Reference.jpg";
		byte[] imageBytes = Files.readAllBytes(Paths.get(imagePath));
		newBook.setImage(imageBytes);
		
		newBook.setLastUpdateTime(publishDate);
		
		Book createdBook = bookDao.create(newBook);
		
		assertTrue(createdBook.getBookId()>0);
	}
	
	@Test
	public void testUpdateBook() throws ParseException, IOException {
		Book existBook = new Book();
		existBook.setBookId(1);
		
		Category category = new Category( "Java Core");
		category.setCategoryId(1);	
		existBook.setCategory(category);
		
		existBook.setAuthor("Herbert Schildt");
		existBook.setTitle("Java 2: The Complete Reference(2nd edition)");
		existBook.setDescripton("This fifth edition of a guide to the Java language covers the latest features of Java 2, v1.4, including the new I/O API, regular expression, chained exceptions, the assert keyword, and upgrades to Java's networking classes and the Collections Framework.");
		existBook.setPrice(40.50f);
		existBook.setIsbn("302451543");
		
		DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date publishDate = dateFormat.parse("05/24/2005");
		existBook.setPublishDate(publishDate);
		
		String imagePath = "C:\\Users\\vaske\\BookStoreProject\\pictures-of-books\\Java-2-The-Complete-Reference.jpg";
		byte[] imageBytes = Files.readAllBytes(Paths.get(imagePath));
		existBook.setImage(imageBytes);
		
		existBook.setLastUpdateTime(publishDate);
		
		Book updatedBook = bookDao.update(existBook);
		
		assertEquals(existBook.getTitle(), updatedBook.getTitle());
	}
	
	@Test(expected = EntityNotFoundException.class)
	public void testDeleteBookFail() {
		Integer bookId = 100;
		bookDao.delete(bookId);
	}

	@Test
	public void testDeleteBookSuccess() {
		Integer bookId = 1;
		bookDao.delete(bookId);
		
		assertTrue(true);
	}
	
	@Test
	public void testGetBookFail() {
		Integer bookId=99;
		Book book = bookDao.get(bookId);
		
		assertNull(book);
	}
	
	@Test
	public void testListNewBooks() {
		List<Book> listNewBooks = bookDao.listNewBooks();
		for (Book aBook : listNewBooks) {
			System.out.println(aBook.getTitle() + " - " + aBook.getPublishDate());
		}
		
		assertEquals(listNewBooks.size(), 4);
	}
	
	@Test
	public void testSearchBookInTitle() {
		String keyword = "cuprija";
		List<Book> result = bookDao.search(keyword);
		
		for (Book aBook : result) {
			System.out.println(aBook.getTitle());
		}
		
		assertEquals(1 , result.size());
	}
	
	@Test
	public void testSearchBookInAuthor() {
		String keyword = "Lav Tol";
		List<Book> result = bookDao.search(keyword);
		
		for (Book aBook : result) {
			System.out.println(aBook.getTitle());
		}
		
		assertEquals(2 , result.size());
	}
	
	@Test
	public void testSearchBookInDescription() {
		String keyword = "fifth edition";
		List<Book> result = bookDao.search(keyword);
		
		for (Book aBook : result) {
			System.out.println(aBook.getTitle());
		}
		
		assertEquals(1 , result.size());
	}
	
	@Test
	public void testListByCategory() {
		int categoryId = 14;
		
		List<Book> listBooks = bookDao.listByCategory(categoryId);
		
		assertTrue(listBooks.size() > 0 );
	}
	
	@Test
	public void testGetBookSuccess() {
		Integer bookId=2;
		Book book = bookDao.get(bookId);
		
		assertNotNull(book);
	}
	
	@Test
	public void testListAll() {
		List<Book> listBooks = bookDao.listAll();
		
		for (Book book : listBooks) {
			System.out.println(book.getTitle() + " - " + book.getAuthor());
		}
		
		assertFalse(listBooks.isEmpty());
	}
	
	@Test
	public void findByTitleNotExist() {
		String title = "Thinking in Java";
		Book book = bookDao.findByTitle(title);
		
		assertNull(book);
	}
	
	@Test
	public void findByTitle() {
		String title = "Java 1: The Complete Reference";
		Book book = bookDao.findByTitle(title);
		
		System.out.println(book.getTitle());
		System.out.println(book.getAuthor());
		System.out.println(book.getPrice());
		assertNotNull(book);
	}
	
	@Test
	public void testListBestSellingBooks() {
		List<Book> topBestSellingBooks = bookDao.listBestSellingBooks();
		
		assertEquals(4, topBestSellingBooks.size());
	}
	
	@Test
	public void testCount() {
		long totalBooks = bookDao.count();
		
		assertEquals(2, totalBooks);
	}
	
	@Test
	public void testCountByCategory() {
		int categoryId = 1;
		long numOfBooks = bookDao.countByCategory(categoryId);
		
		assertTrue(numOfBooks == 2);
	}
}
